{% assign first_cart_item = cart.items | first %}
{% comment %} {% assign upsell_product_item = null %} {% endcomment %}

{% if first_cart_item %}
  <tr id="Upsell-Product" role="row" style="display: none;">
    <td class="cart-item__media upsell-product__media" colspan="3" role="cell" headers="CartDrawer-ColumnProductImage">
      <div class="upsell-carousel__container">
        <div class="upsell-carousel__header">
          <h5>YOU MAY ALSO LIKE</h5>
          <div class="upsell-carousel__nav">
            <button
              type="button"
              class="upsell-carousel__btn upsell-carousel__btn--prev"
              aria-label="Previous products"
            >
              ←
            </button>
            <button type="button" class="upsell-carousel__btn upsell-carousel__btn--next" aria-label="Next products">
              →
            </button>
          </div>
        </div>
        <div class="upsell-carousel__wrapper">
          <div class="upsell-carousel__track">
            <div class="upsell-carousel__slides" id="upsell-carousel-slides">
              <!-- Products will be dynamically inserted here -->
            </div>
          </div>
        </div>
      </div>
    </td>
  </tr>

  <style>
    table:not([class]) {
      box-shadow: none;
    }

    table:not([class]) td,
    table:not([class]) th {
      border: none !important;
      padding: 0 !important;
    }

    fieldset.js.product-form__input.product-form__input--pill {
      border: none !important;
      padding: 0 !important;
    }

    .cart-spinner {
      position: relative;
      right: 0 !important;
      padding: 0 !important;
      padding-top: 0 !important;
    }

    .price-label {
      font-size: 10px;
    }

    .cart-item__final-price.product-option {
      padding-left: 5px;
    }

    .cart-item.loading {
      transition: opacity 0.3s ease;
    }

    #Upsell-Product {
      border-top: 1px solid rgba(var(--color-foreground), 0.2) !important;
    }

    #Upsell-Product td {
      border-top: 1px solid rgba(var(--color-foreground), 0.2) !important;
    }

    .upsell-product__media {
      padding: 20px 10px;
      width: 50% !important;
    }

    .upsell-carousel__container {
      width: 100%;
      margin-top: 10px;
    }

    .upsell-carousel__header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
      padding-top: 10px;
    }

    .upsell-carousel__header h4 {
      margin: 0;
      font-size: 16px;
      color: rgba(var(--color-foreground), 0.8);
    }

    .upsell-carousel__nav {
      display: flex;
      gap: 8px;
    }

    .upsell-carousel__wrapper {
      display: flex;
      justify-content: flex-start;
    }

    .upsell-carousel__btn {
      background: transparent;
      border: none;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 16px;
      color: rgba(var(--color-foreground), 0.7);
      flex-shrink: 0;
      transition: color 0.2s ease;
    }

    .upsell-carousel__btn:hover {
      color: rgba(var(--color-foreground), 1);
    }

    .upsell-carousel__btn:disabled {
      opacity: 0.3;
      cursor: not-allowed;
    }

    .upsell-carousel__track {
      overflow: hidden;
      width: 350px; /* 2 items × (120px width + 12px gap) */
      margin: 0;
    }

    .upsell-carousel__slides {
      display: flex;
      transition: transform 0.3s ease;
      gap: 12px;
    }

    .upsell-product__item {
      flex: 0 0 auto;
      width: 120px;
      text-align: center;
      padding: 8px;
      border: 1px solid rgba(var(--color-foreground), 0.1);
      border-radius: 8px;
      background-color: rgba(var(--color-background), 1);
    }

    .upsell-product__image {
      width: 104px;
      height: 120px;
      object-fit: contain;
      border-radius: 4px;
      margin-bottom: 10px;
      background-color: rgba(var(--color-foreground), 0.05);
    }

    .upsell-product__title {
      font-size: 1rem;
      line-height: 1.2;
      margin-bottom: 4px;
      color: rgba(var(--color-foreground), 0.9);
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .upsell-product__price {
      font-size: 11px;
      color: rgba(var(--color-foreground), 0.7);
      font-weight: 500;
    }
  </style>

  <script>

    // Function to get current cart products
    function getCartProducts() {
      return [
        {% for item in cart.items %}
          {
            id: {{ item.product.id }},
            title: '{{ item.product.title | escape }}',
            handle: '{{ item.product.handle }}'
          }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ];
    }

    // Carousel state
    let currentSlide = 0;
    let productsPerView = 2; // Number of products visible at once
    let totalProducts = 0;

    // Function to create product HTML
    function createProductHTML(product) {
      const imageUrl = product.images && product.images.length > 0 ? 'https:' + product.images[0] : '';
      const price = product.variants && product.variants.length > 0 ? 
        (product.variants[0].price / 100).toLocaleString('en-US', {
          style: 'currency',
          currency: 'USD'
        }) : '';

      return `
        <div class="upsell-product__item">
          <a href="/products/${product.handle}">
            <img class="upsell-product__image" src="${imageUrl}" alt="${product.title}" loading="lazy">
            <div class="upsell-product__title">${product.title}</div>
            <div class="upsell-product__price">${price}</div>
          </a>
        </div>
      `;
    }

    // Function to update carousel with multiple products
    function updateProductCarousel(relatedProducts) {
      const productCard = document.querySelector('#Upsell-Product');
      const slidesContainer = document.querySelector('#upsell-carousel-slides');
      
      if (productCard && slidesContainer && relatedProducts.length > 0) {
        productCard.style.display = ''; // Show the product card

        // Create HTML for all products
        const productsHTML = relatedProducts.map(product => createProductHTML(product)).join('');
        slidesContainer.innerHTML = productsHTML;

        totalProducts = relatedProducts.length;
        currentSlide = 0;
        updateCarouselButtons();
        updateCarouselPosition();

        // Aggressive scroll to bottom with multiple attempts
        const attemptScroll = () => {
          console.log('Attempting to scroll to upsell...');
          
                  // Force cart drawer to be scrollable with aggressive CSS
        const cartDrawer = document.querySelector('cart-drawer');
        if (cartDrawer) {
          cartDrawer.style.setProperty('max-height', '100vh', 'important');
          cartDrawer.style.setProperty('overflow-y', 'auto', 'important');
          cartDrawer.style.setProperty('height', '100vh', 'important');
        }
        
        const drawerInner = document.querySelector('.drawer__inner');
        if (drawerInner) {
          drawerInner.style.setProperty('max-height', '100vh', 'important');
          drawerInner.style.setProperty('overflow-y', 'auto', 'important');
          drawerInner.style.setProperty('height', '100vh', 'important');
        }
          
          // Try multiple scroll methods
          const methods = [
            () => {
              if (productCard) {
                productCard.scrollIntoView({ behavior: 'smooth', block: 'end' });
                console.log('Method 1: scrollIntoView');
                return true;
              }
              return false;
            },
            () => {
              const container = document.querySelector('.drawer__inner, cart-drawer, #CartDrawer');
              if (container) {
                container.scrollTop = container.scrollHeight;
                console.log('Method 2: scrollTop to', container.scrollHeight);
                return true;
              }
              return false;
            },
            () => {
              window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
              console.log('Method 3: window scroll');
              return true;
            },
            () => {
              // Force scroll by temporarily making content taller
              if (productCard) {
                const spacer = document.createElement('div');
                spacer.style.height = '200px';
                spacer.id = 'temp-spacer';
                productCard.parentNode.appendChild(spacer);
                
                setTimeout(() => {
                  productCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
                  setTimeout(() => {
                    const tempSpacer = document.getElementById('temp-spacer');
                    if (tempSpacer) tempSpacer.remove();
                  }, 1000);
                }, 100);
                
                console.log('Method 4: forced height with spacer');
                return true;
              }
              return false;
            }
          ];
          
          // Try each method
          for (let i = 0; i < methods.length; i++) {
            try {
              if (methods[i]()) {
                console.log(`Scroll method ${i + 1} executed`);
                break;
              }
            } catch (error) {
              console.log(`Scroll method ${i + 1} failed:`, error);
            }
          }
        };
        
        // Multiple timed attempts
        setTimeout(attemptScroll, 500);
        setTimeout(attemptScroll, 1000);
        setTimeout(attemptScroll, 1500);
      }
    }

    // Function to update carousel position
    function updateCarouselPosition() {
      const slidesContainer = document.querySelector('#upsell-carousel-slides');
      if (slidesContainer) {
        const slideWidth = 132; // 120px item width + 12px gap
        const offset = currentSlide * slideWidth;
        slidesContainer.style.transform = `translateX(-${offset}px)`;
      }
    }

    // Function to update button states
    function updateCarouselButtons() {
      const prevBtn = document.querySelector('.upsell-carousel__btn--prev');
      const nextBtn = document.querySelector('.upsell-carousel__btn--next');
      
      if (prevBtn && nextBtn) {
        prevBtn.disabled = currentSlide <= 0;
        nextBtn.disabled = currentSlide >= totalProducts - productsPerView;
      }
    }

    // Function to fetch and update related products
    function fetchAndUpdateRelatedProducts() {
      return new Promise((resolve, reject) => {
        const cartProducts = getCartProducts();

        // Get the first cart item's ID
        const firstCartItem = cartProducts[0];
        if (!firstCartItem) {
          const upsellSection = document.querySelector('#Upsell-Product');
          if (upsellSection) {
            upsellSection.style.display = 'none';
          }
          return resolve();
        }

        const relatedProductUrl = `/recommendations/products.json?product_id=${firstCartItem.id}&limit=12&intent=related`;
        
        // Show loading state
        const productCard = document.querySelector('#Upsell-Product');
        if (productCard) {
          productCard.classList.add('loading');
          productCard.style.opacity = '0.5';
        }
        
        fetch(relatedProductUrl)
          .then(response => response.json())
          .then(data => {

            // Filter out products already in cart and limit to 10
            const relatedProducts = data.products
              .filter(product => !cartProducts.some(cartItem => cartItem.id === product.id))
              .slice(0, 10);

            if (relatedProducts.length > 0) {
              updateProductCarousel(relatedProducts);
            } else {
              // Hide the upsell section if no eligible related products
              const upsellSection = document.querySelector('#Upsell-Product');
              if (upsellSection) {
                upsellSection.style.display = 'none';
              }
            }
            resolve();
          })
          .catch(error => {
            reject(error);
          })
          .finally(() => {
            // Hide loading state
            if (productCard) {
              productCard.classList.remove('loading');
              productCard.style.opacity = '';
            }
          });
      });
    }

    // Initial fetch of related products
    fetchAndUpdateRelatedProducts();



    // Debounce function to limit update frequency
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // Flag to prevent recursive updates
    let isUpdatingUpsell = false;

    // Debounced version of fetchAndUpdateRelatedProducts
    const debouncedFetchAndUpdate = debounce(() => {
      if (isUpdatingUpsell) return;
      isUpdatingUpsell = true;
      
      fetchAndUpdateRelatedProducts()
        .catch(error => {
        })
        .finally(() => {
          isUpdatingUpsell = false;
        });
    }, 300); // Reduced debounce time for better responsiveness

    // Set up observer to watch for cart changes
    const cartDrawerObserver = new MutationObserver((mutations) => {
      // Ignore mutations if we're currently updating
      if (isUpdatingUpsell) return;

      // Check if the mutations affect cart items
      const cartChanged = mutations.some(mutation => {
        const target = mutation.target;
        
        // Ignore mutations to the upsell product itself
        if (target.closest('#Upsell-Product')) return false;
        
        // Look for changes in cart items
        const isCartItemsChange = target.classList.contains('cart-items') ||
                                target.closest('.cart-items');
        const hasNodeChanges = mutation.addedNodes.length > 0 || 
                             mutation.removedNodes.length > 0;
        
        return isCartItemsChange || hasNodeChanges;
      });

      if (cartChanged) {
        debouncedFetchAndUpdate();
      }
    });

    // Start observing the cart drawer for changes
    const cartDrawer = document.querySelector('#CartDrawer');
    if (cartDrawer) {
      cartDrawerObserver.observe(cartDrawer, {
        childList: true,
        subtree: true,
        attributes: false, // Only watch for content changes
        characterData: false
      });
    }

    // Carousel navigation event listeners
    document.addEventListener('click', function(event) {
      if (event.target.closest('.upsell-carousel__btn--prev')) {
        event.preventDefault();
        event.stopPropagation();
        if (currentSlide > 0) {
          currentSlide--;
          updateCarouselPosition();
          updateCarouselButtons();
        }
      } else if (event.target.closest('.upsell-carousel__btn--next')) {
        event.preventDefault();
        event.stopPropagation();
        if (currentSlide < totalProducts - productsPerView) {
          currentSlide++;
          updateCarouselPosition();
          updateCarouselButtons();
        }
      }
    });
  </script>
{% endif %}
